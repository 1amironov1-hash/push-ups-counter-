import serial
import serial.tools.list_ports
import threading
import time
import tkinter as tk
from tkinter import messagebox
import re
import os
import sys

# === –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ COM-–ø–æ—Ä—Ç–∞ ===
def find_arduino_port():
    ports = list(serial.tools.list_ports.comports())
    for port in ports:
        if "Arduino" in port.description or "CH340" in port.description or "USB-SERIAL" in port.description:
            return port.device
    # –ï—Å–ª–∏ Arduino –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–ø—Ä–æ—Å–∏–º –≤—Ä—É—á–Ω—É—é
    messagebox.showwarning("Arduino –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ Arduino. –ü–æ–¥–∫–ª—é—á–∏ –µ—ë –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
    return None

# === –ò—â–µ–º Arduino ===
SERIAL_PORT = find_arduino_port()
BAUD_RATE = 9600

ser = None
if SERIAL_PORT:
    try:
        ser = serial.Serial(SERIAL_PORT, BAUD_RATE, timeout=1)
        print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ {SERIAL_PORT}")
    except Exception as e:
        messagebox.showerror("–û—à–∏–±–∫–∞", f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ {SERIAL_PORT}\n\n{e}")
else:
    print("‚ùå Arduino –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    sys.exit(1)

# === –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ===
count = 0
goal_reached = False
started = False
last_count = 0

# === –§—É–Ω–∫—Ü–∏—è —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å Arduino ===
def read_from_arduino():
    global count, goal_reached, started, last_count
    while True:
        if ser and ser.in_waiting:
            line = ser.readline().decode(errors='ignore').strip()

            if "–û–¢–ñ–ò–ú–ê–ù–ò–ï #" in line:
                match = re.search(r"–û–¢–ñ–ò–ú–ê–ù–ò–ï #(\d+)", line)
                if match:
                    count = int(match.group(1))
                    if not started and count > 0:
                        started = True
                        label_status.config(text="üèÉ –¢—ã –Ω–∞—á–∞–ª –¥–µ–ª–∞—Ç—å –æ—Ç–∂–∏–º–∞–Ω–∏—è", fg="blue")
                    elif started and count != last_count:
                        label_status.config(text="üí™ –í –ø—Ä–æ—Ü–µ—Å—Å–µ...", fg="orange")
                    last_count = count

            elif "–¶–ï–õ–¨ –î–û–°–¢–ò–ì–ù–£–¢–ê" in line:
                goal_reached = True
                label_status.config(text="üéâ –¢—ã –∑–∞–∫–æ–Ω—á–∏–ª –æ—Ç–∂–∏–º–∞–Ω–∏—è!", fg="green")
                messagebox.showinfo("–ü–æ–∑–¥—Ä–∞–≤–ª—è—é!", "üéâ –¢—ã –∑–∞–∫–æ–Ω—á–∏–ª –æ—Ç–∂–∏–º–∞–Ω–∏—è!")
        time.sleep(0.1)

# === –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å ===
window = tk.Tk()
window.title("–°—á—ë—Ç—á–∏–∫ –æ—Ç–∂–∏–º–∞–Ω–∏–π üí™")
window.geometry("320x160")

label_status = tk.Label(window, text="–ü–æ–¥–∫–ª—é—á–∏ Arduino –∏ –Ω–∞—á–Ω–∏!", font=("Arial", 14))
label_status.pack(pady=40)

# === –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞ ===
def close_app():
    if ser:
        ser.close()
    window.destroy()

btn_exit = tk.Button(window, text="–í—ã—Ö–æ–¥", command=close_app, font=("Arial", 12))
btn_exit.pack(pady=10)

# === –ü–æ—Ç–æ–∫ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö ===
thread = threading.Thread(target=read_from_arduino, daemon=True)
thread.start()

window.mainloop()
