import serial
import serial.tools.list_ports
import tkinter as tk
from tkinter import messagebox
import threading
import time
import requests

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
ser = None
connected = False
stop_thread = False


def find_arduino_port():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Ö–æ–¥–∏—Ç COM-–ø–æ—Ä—Ç Arduino"""
    ports = serial.tools.list_ports.comports()
    for port in ports:
        if "Arduino" in port.description or "CH340" in port.description:
            return port.device
    return None


def connect_arduino():
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Arduino"""
    global ser, connected

    port = find_arduino_port()
    if not port:
        status_label.config(text="‚ö†Ô∏è Arduino –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∏ –Ω–∞–∂–º–∏—Ç–µ '–ü–æ–¥–∫–ª—é—á–∏—Ç—å'.", fg="orange")
        return

    try:
        ser = serial.Serial(port, 9600, timeout=1)
        connected = True
        status_label.config(text=f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ {port}", fg="green")
        messagebox.showinfo("–ü–æ–¥–∫–ª—é—á–µ–Ω–æ", f"Arduino –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –∫ {port}")
        threading.Thread(target=read_from_arduino, daemon=True).start()
    except Exception as e:
        status_label.config(text=f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}", fg="red")


def disconnect_arduino():
    """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç Arduino"""
    global ser, connected
    if ser:
        ser.close()
    ser = None
    connected = False
    status_label.config(text="üîå Arduino –æ—Ç–∫–ª—é—á–µ–Ω–∞", fg="gray")


def read_from_arduino():
    """–§–æ–Ω–æ–≤–æ–µ —á—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Arduino"""
    global ser, connected, stop_thread

    while not stop_thread:
        if connected and ser and ser.in_waiting > 0:
            try:
                line = ser.readline().decode(errors='ignore').strip()
                if "–û–¢–ñ–ò–ú–ê–ù–ò–ï" in line:
                    update_label("üèãÔ∏è‚Äç‚ôÇÔ∏è –í –ø—Ä–æ—Ü–µ—Å—Å–µ...")
                elif "–¶–ï–õ–¨ –î–û–°–¢–ò–ì–ù–£–¢–ê" in line:
                    update_label("üéâ –ó–∞–∫–æ–Ω—á–∏–ª!")
                elif "===" in line:
                    update_label("üí™ –ù–∞—á–∞–ª –æ—Ç–∂–∏–º–∞–Ω–∏—è!")
            except Exception:
                pass
        time.sleep(0.1)


def update_label(text):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ –æ–∫–Ω–µ"""
    info_label.config(text=text)


def fetch_pushup_goal():
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∂–∏–º–∞–Ω–∏–π —Å —Å–∞–π—Ç–∞"""
    if not connected or not ser:
        messagebox.showwarning("–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ Arduino!")
        return

    try:
        url = "https://karatunov.net/readme.php?name=mih&pass=anna22"
        response = requests.get(url, timeout=5)
        response.raise_for_status()
        goal = int(response.text.strip())

        info_label.config(text=f"üìã –ù—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å {goal} –æ—Ç–∂–∏–º–∞–Ω–∏–π")
        ser.write(f"{goal}\n".encode())  # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Arduino
        messagebox.showinfo("–ó–∞–¥–∞—á–∞ –ø–æ–ª—É—á–µ–Ω–∞", f"–¢–≤–æ—è —Ü–µ–ª—å: {goal} –æ—Ç–∂–∏–º–∞–Ω–∏–π")
    except Exception as e:
        messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: {e}")


def on_close():
    """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    global stop_thread
    stop_thread = True
    disconnect_arduino()
    window.destroy()


# --- GUI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å ---
window = tk.Tk()
window.title("–°—á—ë—Ç—á–∏–∫ –æ—Ç–∂–∏–º–∞–Ω–∏–π üí™")
window.geometry("400x280")
window.resizable(False, False)

title_label = tk.Label(window, text="–°—á—ë—Ç—á–∏–∫ –æ—Ç–∂–∏–º–∞–Ω–∏–π", font=("Arial", 18, "bold"))
title_label.pack(pady=10)

info_label = tk.Label(window, text="üí§ –û–∂–∏–¥–∞–Ω–∏–µ Arduino...", font=("Arial", 14))
info_label.pack(pady=20)

status_label = tk.Label(window, text="–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ", fg="gray", font=("Arial", 12))
status_label.pack(pady=10)

button_frame = tk.Frame(window)
button_frame.pack(pady=20)

connect_button = tk.Button(button_frame, text="üîå –ü–æ–¥–∫–ª—é—á–∏—Ç—å Arduino", command=connect_arduino, width=20)
connect_button.grid(row=0, column=0, padx=5)

disconnect_button = tk.Button(button_frame, text="‚ùé –û—Ç–∫–ª—é—á–∏—Ç—å", command=disconnect_arduino, width=20)
disconnect_button.grid(row=0, column=1, padx=5)

goal_button = tk.Button(window, text="üåê –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–∂–∏–º–∞–Ω–∏—è —Å —Å–∞–π—Ç–∞", command=fetch_pushup_goal, width=30)
goal_button.pack(pady=5)

exit_button = tk.Button(window, text="üö™ –í—ã–π—Ç–∏", command=on_close, width=20)
exit_button.pack(pady=10)

window.protocol("WM_DELETE_WINDOW", on_close)

# --- –ó–∞–ø—É—Å–∫ ---
window.mainloop()

